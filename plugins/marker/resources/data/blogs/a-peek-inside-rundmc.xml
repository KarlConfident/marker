<?xml version="1.0" encoding="UTF-8"?>
<ml:Post status="Published" xmlns:ml="http://developer.marklogic.com/site/internal" xmlns="http://www.w3.org/1999/xhtml">
  <ml:title>A peek inside RunDMC, Part 1</ml:title>
  <ml:author>Evan Lenz</ml:author>
  <ml:created>2010-11-08T13:21:37.974144-07:00</ml:created>
  <ml:last-updated>2010-11-08T16:34:53.164616-07:00</ml:last-updated>
  
  <ml:body>
    <p>RunDMC is the name affectionately given to the MarkLogic application that runs the Developer Community website, i.e. the site you're viewing right now. As far as I know, it's the first XSLT-based MarkLogic application in production. You can go and steal all its ideas and techniques from the <a href="https://code.google.com/p/rundmc/source/browse/#svn/trunk">code repository</a>, since it's all open-source. But I thought one way to make things more accessible would be to write about some of the basic architectural approaches used in the application. That way, should you decide to glean some ideas from the code, you'll be one step ahead, knowing what to look for when you do dive in.</p>
<p>I'll be sharing two main techniques we used in the design of RunDMC. The first was to use a single XML file to globally configure the site's navigational structure (grouping of pages into sections and sub-sections); in other words, we used a sitemap to drive the site structure. The second was to use an XML-based tag library to insert dynamic content into the XML pages. This post is about the first technique. I'll cover the second in part 2.</p>
<h3>Sitemap-driven site</h3>
<p>Using an XML-based sitemap allowed us to keep URI structure independent of the site's navigational structure, which was a principal design goal. <a href="https://code.google.com/p/rundmc/source/browse/trunk/config/navigation.xml">You can view the sitemap XML, called navigation.xml, in the online code repository.</a></p>
<p>The external URL of each page is determined by the location of its corresponding XML file in the database's directory structure. For example, the page you're reading right now has the URL "/blog/a-peek-inside-rundmc" which tells you that its content is stored in an XML document with this URI: /blog/a-peek-inside-rundmc.xml. In other words, the path is exactly the same, except that the ".xml" part is stripped out in the external URI. (This is achieved using a simple URL rewriter XQuery script.)</p>
<p>If you later decide you want to change a page's URL, you'd have to change the document's URI, e.g., move it to a different directory. Isn't that kind of a pain though? Well, yes. But that's by design. <a href="http://www.w3.org/Provider/Style/URI">Cool URIs, you see, don't change.</a> Besides, you'd also have to go and update all your links to that page or at least create a redirect from the old page to the new page. So it <em>should</em> be hard to change a page's URL.</p>
<p>But don't websites get redesigned, or at least re-organized, all the time? Yes, they do. However, that doesn't mean the URLs need to change, unless you have the misfortune of using a Web framework that forces you to map URL structure to navigational structure. URI design and information architecture, though related, should not be dependent on each other. With RunDMC, if you want to move a page to a different section of the site, all you'd have to do is move the corresponding &lt;page&gt; element in <a href="https://code.google.com/p/rundmc/source/browse/trunk/config/navigation.xml">navigation.xml</a>. No need to change the URL. This, by the way, is <a href="http://lenzconsulting.com/cocoon-and-4suite/#S2.1.2">not the first time</a> I've used this technique (or preached about it). </p>
<p>How does it work? Well, if you think about it, the only thing that makes a page part of one section versus another is what menus are displayed on the page when you view it in the browser. For example, <a href="/code/rundmc">the DMC page devoted to RunDMC</a> appears in the "Code" section of the site <em>not</em> because its URL starts with "/code/" (that's maintained only by convention, and the application doesn't enforce it), but because the page is configured in navigation.xml to appear with the menus you see on that page:</p>
<script src="http://gist.github.com/668113.js" xml:space="preserve"></script>
<p>The above configuration excerpt is what causes the following menu to be displayed on the page, with RunDMC appearing highlighted in the "Applications" sub-menu of the "Open Source Projects" menu:</p>
<p>
<img src="/media/sub-menu-screenshot.png" alt="The sub-navigation menu for 'Open Source Projects' containing 'Applications' containing 'RunDMC'"/></p>
<p>And since this menu configuration &lt;group&gt; appears as a child of the &lt;page&gt; element for the top-level "Code" page, a glance at the top-level site menu shows that we're in the "Code" section of the site (highlighted):</p>
<p>
<img src="/media/top-menu-screenshot.png" alt="Top-level site menu with 'Code' highlighted"/></p>
<p>But how do these menus actually get generated? The answer to that lies in our use of an XML-based tag library, which I'll be covering in part 2. In the meantime, for a sneak preview, look at <a href="https://code.google.com/p/rundmc/source/browse/trunk/config/template.xhtml">the XHTML template we're using for every page of the site</a>, and search for &lt;ml:top-nav/&gt; and &lt;ml:sub-nav/&gt;. Those are the magical incantations that tell RunDMC where to put the menus on the page.</p>
  </ml:body>
</ml:Post>
