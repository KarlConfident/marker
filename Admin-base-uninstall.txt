xquery version "1.0-ml";
import module namespace admin = "http://marklogic.com/xdmp/admin" at "/MarkLogic/admin.xqy";


declare variable $usernames := ("facebook_1115962037", "github_cchatfield","security-anon");
declare variable $roles := ("security-admin", "security-anon","security-user", "marker-admin");
declare variable $collections := ("http://marklogic.com/marker/drafts", "http://marklogic.com/marker/published");


let $sec := 
for $user in $usernames
return try{

		xdmp:eval(
                    fn:concat(
                    "xquery version '1.0-ml'; 
                    import module namespace sec='http://marklogic.com/xdmp/security' at '/MarkLogic/security.xqy';
                    sec:remove-user('", $user, "')"), (),
                    <options xmlns="xdmp:eval">
                        <database>{xdmp:database("Security")}</database> 
                    </options>) 
            } catch ($e){}


let $sec := 
for $role in $roles
return
try{
 xdmp:eval(
                    fn:concat(
                    "xquery version '1.0-ml'; 
                    import module namespace sec='http://marklogic.com/xdmp/security' at '/MarkLogic/security.xqy';
                    sec:remove-role('", $role, "')"), (),
                    <options xmlns="xdmp:eval">
                        <database>{xdmp:database("Security")}</database> 
                    </options>) 
                     } catch ($e){}

let $sec := try{
for $collection in $collections
return				xdmp:eval(
                    fn:concat(
                    "xquery version '1.0-ml'; 
                    import module namespace sec='http://marklogic.com/xdmp/security' at '/MarkLogic/security.xqy';
                    sec:unprotect-collection('", $collection, "')"), (),
                    <options xmlns="xdmp:eval">
                        <database>{xdmp:database("Security")}</database> 
                    </options>) 
            } catch ($e){}

let $config := admin:get-configuration()
let $groupid := admin:group-get-id($config, "Default")
let $server := try{admin:appserver-delete($config, admin:appserver-get-id($config, $groupid, "8100-marker"))} catch ($e){}
let $_ :=  admin:save-configuration($server)

let $config := admin:get-configuration()
let $config := try{admin:database-delete($config, xdmp:database("marker"))} catch ($e){}
let $_ :=  admin:save-configuration($config)
let $_ := xdmp:sleep(5000)
let $config := admin:get-configuration()
let $config := try{admin:forest-delete($config, admin:forest-get-id($config, "marker"), fn:true())} catch ($e){}
let $_ :=  admin:save-configuration($config)

return "done"


